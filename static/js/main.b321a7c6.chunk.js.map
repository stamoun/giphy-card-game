{"version":3,"sources":["logic/env-api.ts","logic/giphy-api.ts","components/Card.tsx","components/Game.tsx","logic/delay.ts","logic/shuffler.ts","components/App.tsx","index.tsx"],"names":["env","getEnv","_getEnv","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","__webpack_require__","e","then","t","bind","sent","abrupt","stop","search","limit","url","fetchResponse","giphy_api_key","Error","buildGiphyUrl","fetch","ok","console","error","json","apiKey","encodedSearch","encodeURIComponent","concat","CardUI","styled","button","_templateObject","props","backgroundColor","Card","_ref","imgSrc","gameCard","color","displayId","onClick","isContentVisible","state","react_default","createElement","image","alt","src","pairId","GamePanel","div","Game_templateObject","columnCount","EZ_MODES","Game","cardCount","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","blocked","setBlocked","_useState5","_useState6","cards","setCards","_useState7","_useState8","ezMode","setEzMode","useEffect","_x","_x2","_getImages","getImages","response","ms","result","Promise","resolve","setTimeout","index","results","data","map","gd","images","fixed_height","indices","Array","from","length","_","k","Math","floor","newCards","array","lastIndex","item","random","tempItem","shuffle","pairIndex","cardIndex","cardId","renderEmpty","renderFilled","Fragment","value","onChange","handleEzModeChange","s","key","computeGrid","columns","card","Card_Card","getCardColor","handleCardClicked","bracketsCount","cardState","ezModeColor","log","currentTarget","previousCard","find","c","matchCards","hideCards","getUpdatedCards","_len","cardIds","_key","updatedCards","_len2","_key2","nextState","cardsToUpdate","includes","objectSpread","cellCount","sqrt","rows","GAME_SIZES","App","draftCardCount","setDraftCardCount","setCardCount","draftSearch","setDraftSearch","setSearch","className","onSubmit","preventDefault","type","parseInt","disabled","Game_Game","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.b321a7c6.chunk.js","sourcesContent":["interface Env {\r\n  giphy_api_key: string;\r\n}\r\n\r\nlet env: Env = null;\r\n\r\nexport async function getEnv(): Promise<Env> {\r\n  if (!env) {\r\n    env = await import(\"../env.json\");\r\n  }\r\n\r\n  return env;\r\n}\r\n","import { getEnv } from './env-api';\r\n\r\ninterface GiphyImageResponse {\r\n  data: GiphyData[];\r\n}\r\n\r\ninterface GiphyData {\r\n  type: 'gif';\r\n  id: string;\r\n  images: {\r\n    fixed_height: GiphyImage;\r\n  };\r\n}\r\n\r\nexport interface GiphyImage {\r\n  url: string;\r\n  width: string;\r\n  height: string;\r\n}\r\n\r\nexport async function getImages(\r\n  search: string,\r\n  limit: number\r\n): Promise<GiphyImageResponse> {\r\n  const env = await getEnv();\r\n  if (!env.giphy_api_key) {\r\n    throw new Error('No Giphy api key found.');\r\n  }\r\n\r\n  const url = buildGiphyUrl(search, limit, env.giphy_api_key);\r\n\r\n  const fetchResponse = await fetch(url);\r\n  if (!fetchResponse.ok) {\r\n    console.error('Error fetching images', fetchResponse);\r\n    throw new Error('Could not fetch images from Giphy');\r\n  }\r\n\r\n  return await fetchResponse.json();\r\n}\r\n\r\nfunction buildGiphyUrl(search: string, limit: number, apiKey: string): string {\r\n  const encodedSearch = encodeURIComponent(search);\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodedSearch}&limit=${limit}&api_key=${apiKey}`;\r\n\r\n  return url;\r\n}\r\n","import React from 'react';\r\nimport { GameCard } from '../models/game-card';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardProps {\r\n  gameCard: GameCard;\r\n  color: string;\r\n  displayId: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface CardUIButton {\r\n  backgroundColor: string;\r\n}\r\n\r\nconst CardUI = styled.button<CardUIButton>`\r\n  background: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  border: 1px solid black;\r\n  width: 200px;\r\n  height: 200px;\r\n  border-radius: 6px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  ${props => props.backgroundColor}\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border: 2px solid black;\r\n  }\r\n\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n  > img {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Card = ({ gameCard, color, displayId, onClick }: CardProps) => {\r\n  const isContentVisible = gameCard.state !== 'hidden';\r\n\r\n  return (\r\n    <CardUI onClick={onClick} backgroundColor={color}>\r\n      {isContentVisible\r\n        ? renderCardContent(gameCard.image.url)\r\n        : displayId\r\n        ? gameCard.pairId\r\n        : ''}\r\n    </CardUI>\r\n  );\r\n};\r\n\r\nfunction renderCardContent(imgSrc: string) {\r\n  return <img alt=\"Card\" src={imgSrc} />;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getImages } from '../logic/giphy-api';\r\nimport { shuffle } from '../logic/shuffler';\r\nimport { GameCard, CardState } from '../models/game-card';\r\nimport { Card } from './Card';\r\nimport { delay } from '../logic/delay';\r\nimport styled from 'styled-components';\r\n\r\ninterface GameDiv {\r\n  columnCount: number;\r\n}\r\n\r\ninterface GameProps {\r\n  search: string;\r\n  cardCount: number;\r\n}\r\n\r\nconst GamePanel = styled.div<GameDiv>`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.columnCount}, 200px);\r\n  grid-gap: 6px;\r\n  margin: 6px;\r\n  justify-content: center;\r\n`;\r\n\r\nconst EZ_MODES = ['off', 'colors', 'id'];\r\n\r\nexport const Game = ({ search, cardCount }: GameProps) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [blocked, setBlocked] = useState(false);\r\n  const [cards, setCards] = useState<GameCard[]>([]);\r\n  const [ezMode, setEzMode] = useState('off');\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    getImages(search, cardCount / 2)\r\n      .then(response => delay(1000, response))\r\n      .then(response => {\r\n        let index = 0;\r\n        const results = response.data.map(gd => {\r\n          return {\r\n            image: gd.images.fixed_height,\r\n            pairId: index++\r\n          };\r\n        });\r\n\r\n        let indices = Array.from({ length: cardCount }, (_, k) =>\r\n          Math.floor(k / 2)\r\n        );\r\n        indices = shuffle(indices);\r\n\r\n        const newCards = indices.map((pairIndex, cardIndex) => {\r\n          const result = results[pairIndex];\r\n          const gameCard: GameCard = {\r\n            cardId: cardIndex,\r\n            pairId: result.pairId,\r\n            state: 'hidden',\r\n            image: result.image\r\n          };\r\n          return gameCard;\r\n        });\r\n\r\n        setLoading(false);\r\n        setCards(newCards);\r\n      });\r\n  }, [search, cardCount]);\r\n\r\n  const renderLoading = () => {\r\n    return <div>Loading...</div>;\r\n  };\r\n\r\n  const renderLoaded = (results: GameCard[]): JSX.Element => {\r\n    return results.length === 0 ? renderEmpty() : renderFilled(results);\r\n  };\r\n\r\n  const renderEmpty = () => {\r\n    return <div>No results</div>;\r\n  };\r\n\r\n  const renderFilled = (results: GameCard[]): JSX.Element => {\r\n    return (\r\n      <>\r\n        <label>\r\n          EZ Mode:\r\n          <select value={ezMode} onChange={handleEzModeChange}>\r\n            {EZ_MODES.map(s => (\r\n              <option value={s} key={s}>\r\n                {s}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <GamePanel columnCount={computeGrid(cardCount).columns}>\r\n          {results.map(card => (\r\n            <Card\r\n              key={card.cardId}\r\n              gameCard={card}\r\n              color={getCardColor(\r\n                cardCount / 2,\r\n                card.pairId,\r\n                card.state,\r\n                ezMode\r\n              )}\r\n              displayId={ezMode === 'id'}\r\n              onClick={() => handleCardClicked(card.cardId)}\r\n            />\r\n          ))}\r\n        </GamePanel>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getCardColor = (\r\n    bracketsCount: number,\r\n    pairId: number,\r\n    cardState: string,\r\n    ezMode: string\r\n  ) => {\r\n    const value = Math.floor((256 / bracketsCount) * (pairId + 1));\r\n    const ezModeColor = `hsl(${value}, 100%, 50%)`;\r\n\r\n    console.log(`color: ${ezModeColor}`);\r\n\r\n    const color =\r\n      cardState === 'revealed'\r\n        ? 'bisque'\r\n        : cardState === 'matched'\r\n        ? 'pink'\r\n        : ezMode === 'colors'\r\n        ? ezModeColor\r\n        : 'darksalmon';\r\n\r\n    const backgroundColor = `background-color: ${color};`;\r\n\r\n    return backgroundColor;\r\n  };\r\n\r\n  const handleEzModeChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n    setEzMode(e.currentTarget.value);\r\n  };\r\n\r\n  const handleCardClicked = (cardId: number) => {\r\n    if (blocked) {\r\n      return;\r\n    }\r\n\r\n    const previousCard = cards.find(c => {\r\n      return c.state === 'revealed';\r\n    });\r\n\r\n    if (!previousCard) {\r\n      setCards(getUpdatedCards(cards, 'revealed', [cardId]));\r\n      return;\r\n    }\r\n\r\n    const card = cards[cardId];\r\n\r\n    if (previousCard === card) {\r\n      return;\r\n    }\r\n\r\n    previousCard.pairId === card.pairId\r\n      ? matchCards(previousCard.cardId, card.cardId)\r\n      : hideCards(previousCard.cardId, card.cardId);\r\n  };\r\n\r\n  const matchCards = (...cardIds: number[]) => {\r\n    const updatedCards = getUpdatedCards(cards, 'matched', cardIds);\r\n    setCards(updatedCards);\r\n  };\r\n\r\n  const hideCards = (...cardIds: number[]) => {\r\n    setBlocked(true);\r\n    const updatedCards = getUpdatedCards(cards, 'revealed', cardIds);\r\n    setCards(updatedCards);\r\n\r\n    setTimeout(() => {\r\n      const updatedCards = getUpdatedCards(cards, 'hidden', cardIds);\r\n      setCards(updatedCards);\r\n      setBlocked(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return <div>{loading ? renderLoading() : renderLoaded(cards)}</div>;\r\n};\r\n\r\nfunction getUpdatedCards(\r\n  cards: GameCard[],\r\n  nextState: CardState,\r\n  cardsToUpdate: number[]\r\n) {\r\n  return cards.map(c => {\r\n    if (!cardsToUpdate.includes(c.cardId)) {\r\n      return c;\r\n    }\r\n    return {\r\n      ...c,\r\n      state: nextState\r\n    };\r\n  });\r\n}\r\n\r\nfunction computeGrid(cellCount: number) {\r\n  var columns = Math.floor(Math.sqrt(cellCount));\r\n  var rows = cellCount / columns;\r\n  return {\r\n    columns,\r\n    rows\r\n  };\r\n}\r\n","export function delay<T>(ms: number, result: T): Promise<T> {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(result), ms);\r\n  });\r\n}\r\n","export function shuffle(array: any[]) {\r\n  let lastIndex = array.length;\r\n\r\n  while (lastIndex) {\r\n    let item = Math.floor(Math.random() * lastIndex--);\r\n\r\n    let tempItem = array[lastIndex];\r\n    array[lastIndex] = array[item];\r\n    array[item] = tempItem;\r\n  }\r\n\r\n  return array;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Game } from './Game';\r\n\r\nconst GAME_SIZES = [12, 16, 20, 30, 36];\r\n\r\nexport const App = () => {\r\n  const [draftCardCount, setDraftCardCount] = useState(16);\r\n  const [cardCount, setCardCount] = useState(16);\r\n  const [draftSearch, setDraftSearch] = useState('Nicolas Cage');\r\n  const [search, setSearch] = useState('Nicolas Cage');\r\n\r\n  const handleFormSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setCardCount(draftCardCount);\r\n    setSearch(draftSearch);\r\n  };\r\n\r\n  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setDraftSearch(e.currentTarget.value);\r\n  };\r\n\r\n  const handleCardCountChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n    const next = parseInt(e.currentTarget.value, 10);\r\n    setDraftCardCount(next);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleFormSubmit}>\r\n        <label>\r\n          Search:\r\n          <input\r\n            type=\"text\"\r\n            value={draftSearch}\r\n            onChange={handleSearchChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Card count:\r\n          <select value={draftCardCount} onChange={handleCardCountChange}>\r\n            {GAME_SIZES.map(s => (\r\n              <option value={s} key={s}>\r\n                {s}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <button type=\"submit\" disabled={!draftSearch}>\r\n          Start\r\n        </button>\r\n      </form>\r\n\r\n      <Game search={search} cardCount={cardCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}