{"version":3,"sources":["logic/env-api.ts","logic/giphy-api.ts","components/Card.tsx","components/Game.tsx","logic/delay.ts","logic/shuffler.ts","components/App.tsx","index.tsx"],"names":["env","getEnv","_getEnv","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","__webpack_require__","e","then","t","bind","sent","abrupt","stop","search","limit","url","fetchResponse","giphy_api_key","Error","buildGiphyUrl","fetch","ok","console","error","json","apiKey","encodedSearch","encodeURIComponent","concat","CardUI","styled","button","_templateObject","props","cardState","Card","_ref","ezMode","pairId","imgSrc","gameCard","onClick","isContentVisible","state","react_default","createElement","image","alt","src","GamePanel","div","Game_templateObject","columnCount","Game","cardCount","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","blocked","setBlocked","_useState5","_useState6","cards","setCards","useEffect","_x","_x2","_getImages","getImages","response","ms","result","Promise","resolve","setTimeout","results","data","map","gd","images","fixed_height","id","indices","Array","from","length","_","k","Math","floor","newCards","array","lastIndex","item","random","tempItem","shuffle","pairIndex","cardIndex","cardId","renderEmpty","renderFilled","Fragment","computeGrid","columns","card","Card_Card","key","handleCardClicked","previousCard","find","c","matchCards","hideCards","getUpdatedCards","_len","cardIds","_key","updatedCards","_len2","_key2","nextState","cardsToUpdate","includes","objectSpread","cellCount","sqrt","rows","GAME_SIZES","App","draftCardCount","setDraftCardCount","setCardCount","draftSearch","setDraftSearch","_useState7","_useState8","setSearch","_useState9","_useState10","setEzMode","className","onSubmit","preventDefault","type","value","onChange","currentTarget","parseInt","s","checked","disabled","Game_Game","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.dd4e44e7.chunk.js","sourcesContent":["interface Env {\r\n  giphy_api_key: string;\r\n}\r\n\r\nlet env: Env = null;\r\n\r\nexport async function getEnv(): Promise<Env> {\r\n  if (!env) {\r\n    env = await import(\"../env.json\");\r\n  }\r\n\r\n  return env;\r\n}\r\n","import { getEnv } from \"./env-api\";\r\n\r\ninterface GiphyImageResponse {\r\n  data: GiphyData[];\r\n}\r\n\r\ninterface GiphyData {\r\n  type: \"gif\";\r\n  id: string;\r\n  images: {\r\n    fixed_height: GiphyImage;\r\n  };\r\n}\r\n\r\nexport interface GiphyImage {\r\n  url: string;\r\n  width: string;\r\n  height: string;\r\n}\r\n\r\nexport async function getImages(\r\n  search: string,\r\n  limit: number\r\n): Promise<GiphyImageResponse> {\r\n  const env = await getEnv();\r\n  if (!env.giphy_api_key) {\r\n    throw new Error(\"No Giphy api key found.\");\r\n  }\r\n\r\n  const url = buildGiphyUrl(search, limit, env.giphy_api_key);\r\n\r\n  const fetchResponse = await fetch(url);\r\n  if (!fetchResponse.ok) {\r\n    console.error(\"Error fetching images\", fetchResponse);\r\n    throw new Error(\"Could not fetch images from Giphy\");\r\n  }\r\n\r\n  return await fetchResponse.json();\r\n}\r\n\r\nfunction buildGiphyUrl(search: string, limit: number, apiKey: string): string {\r\n  const encodedSearch = encodeURIComponent(search);\r\n  return `https://api.giphy.com/v1/gifs/search?q=${encodedSearch}&limit=${limit}&api_key=${apiKey}`;\r\n}\r\n","import React from 'react';\r\nimport { GameCard } from '../models/game-card';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardProps {\r\n  gameCard: GameCard;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface CardUIButton {\r\n  cardState: string;\r\n}\r\n\r\nconst CardUI = styled.button<CardUIButton>`\r\n  background: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  border: 1px solid black;\r\n  width: 200px;\r\n  height: 200px;\r\n  border-radius: 6px;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border: 2px solid black;\r\n  }\r\n\r\n  ${props =>\r\n    props.cardState === 'revealed'\r\n      ? `background-color: bisque;`\r\n      : props.cardState === 'matched'\r\n      ? `background-color: pink;`\r\n      : `background-color: darksalmon;\r\n\r\n    &:hover {\r\n      opacity: 0.8;\r\n    }\r\n  `}\r\n\r\n  > img {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Card = ({ gameCard, onClick }: CardProps) => {\r\n  const isContentVisible = gameCard.state !== 'hidden';\r\n\r\n  return (\r\n    <CardUI onClick={onClick} cardState={gameCard.state}>\r\n      {isContentVisible\r\n        ? renderCardContent(gameCard.image.url)\r\n        : renderHiddenCardContent(gameCard.ezMode, gameCard.pairId)}\r\n    </CardUI>\r\n  );\r\n};\r\n\r\nfunction renderCardContent(imgSrc: string) {\r\n  return <img alt=\"Card\" src={imgSrc} />;\r\n}\r\n\r\nfunction renderHiddenCardContent(ezMode: boolean, pairId: string) {\r\n  return ezMode ? pairId : '';\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getImages } from '../logic/giphy-api';\r\nimport { shuffle } from '../logic/shuffler';\r\nimport { GameCard, CardState } from '../models/game-card';\r\nimport { Card } from './Card';\r\nimport { delay } from '../logic/delay';\r\nimport styled from 'styled-components';\r\n\r\ninterface GameDiv {\r\n  columnCount: number;\r\n}\r\n\r\ninterface GameProps {\r\n  search: string;\r\n  cardCount: number;\r\n  ezMode: boolean;\r\n}\r\n\r\nconst GamePanel = styled.div<GameDiv>`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.columnCount}, 200px);\r\n  grid-gap: 6px;\r\n  margin: 6px;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Game = ({ search, cardCount, ezMode }: GameProps) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [blocked, setBlocked] = useState(false);\r\n  const [cards, setCards] = useState<GameCard[]>([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    getImages(search, cardCount / 2)\r\n      .then(response => delay(1000, response))\r\n      .then(response => {\r\n        const results = response.data.map(gd => {\r\n          return {\r\n            image: gd.images.fixed_height,\r\n            pairId: gd.id\r\n          };\r\n        });\r\n\r\n        let indices = Array.from({ length: cardCount }, (_, k) =>\r\n          Math.floor(k / 2)\r\n        );\r\n        indices = shuffle(indices);\r\n\r\n        const newCards = indices.map((pairIndex, cardIndex) => {\r\n          const result = results[pairIndex];\r\n          const gameCard: GameCard = {\r\n            cardId: cardIndex,\r\n            ezMode: ezMode,\r\n            pairId: result.pairId,\r\n            state: 'hidden',\r\n            image: result.image\r\n          };\r\n          return gameCard;\r\n        });\r\n\r\n        setLoading(false);\r\n        setCards(newCards);\r\n      });\r\n  }, [search, cardCount, ezMode]);\r\n\r\n  const renderLoading = () => {\r\n    return <div>Loading...</div>;\r\n  };\r\n\r\n  const renderLoaded = (results: GameCard[]): JSX.Element => {\r\n    return results.length === 0 ? renderEmpty() : renderFilled(results);\r\n  };\r\n\r\n  const renderEmpty = () => {\r\n    return <div>No results</div>;\r\n  };\r\n\r\n  const renderFilled = (results: GameCard[]): JSX.Element => {\r\n    return (\r\n      <>\r\n        <GamePanel columnCount={computeGrid(cardCount).columns}>\r\n          {results.map(card => (\r\n            <Card\r\n              key={card.cardId}\r\n              gameCard={card}\r\n              onClick={() => handleCardClicked(card.cardId)}\r\n            />\r\n          ))}\r\n        </GamePanel>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleCardClicked = (cardId: number) => {\r\n    if (blocked) {\r\n      return;\r\n    }\r\n\r\n    const previousCard = cards.find(c => {\r\n      return c.state === 'revealed';\r\n    });\r\n\r\n    if (!previousCard) {\r\n      setCards(getUpdatedCards(cards, 'revealed', [cardId]));\r\n      return;\r\n    }\r\n\r\n    const card = cards[cardId];\r\n\r\n    if (previousCard === card) {\r\n      return;\r\n    }\r\n\r\n    previousCard.pairId === card.pairId\r\n      ? matchCards(previousCard.cardId, card.cardId)\r\n      : hideCards(previousCard.cardId, card.cardId);\r\n  };\r\n\r\n  const matchCards = (...cardIds: number[]) => {\r\n    const updatedCards = getUpdatedCards(cards, 'matched', cardIds);\r\n    setCards(updatedCards);\r\n  };\r\n\r\n  const hideCards = (...cardIds: number[]) => {\r\n    setBlocked(true);\r\n    const updatedCards = getUpdatedCards(cards, 'revealed', cardIds);\r\n    setCards(updatedCards);\r\n\r\n    setTimeout(() => {\r\n      const updatedCards = getUpdatedCards(cards, 'hidden', cardIds);\r\n      setCards(updatedCards);\r\n      setBlocked(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return <div>{loading ? renderLoading() : renderLoaded(cards)}</div>;\r\n};\r\n\r\nfunction getUpdatedCards(\r\n  cards: GameCard[],\r\n  nextState: CardState,\r\n  cardsToUpdate: number[]\r\n) {\r\n  return cards.map(c => {\r\n    if (!cardsToUpdate.includes(c.cardId)) {\r\n      return c;\r\n    }\r\n    return {\r\n      ...c,\r\n      state: nextState\r\n    };\r\n  });\r\n}\r\n\r\nfunction computeGrid(cellCount: number) {\r\n  var columns = Math.floor(Math.sqrt(cellCount));\r\n  var rows = cellCount / columns;\r\n  return {\r\n    columns,\r\n    rows\r\n  };\r\n}\r\n","export function delay<T>(ms: number, result: T): Promise<T> {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(result), ms);\r\n  });\r\n}\r\n","export function shuffle(array: any[]) {\r\n  let lastIndex = array.length;\r\n\r\n  while (lastIndex) {\r\n    let item = Math.floor(Math.random() * lastIndex--);\r\n\r\n    let tempItem = array[lastIndex];\r\n    array[lastIndex] = array[item];\r\n    array[item] = tempItem;\r\n  }\r\n\r\n  return array;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Game } from './Game';\r\n\r\nconst GAME_SIZES = [12, 16, 20, 30, 36, 42, 56, 64];\r\n\r\nexport const App = () => {\r\n  const [draftCardCount, setDraftCardCount] = useState(16);\r\n  const [cardCount, setCardCount] = useState(16);\r\n  const [draftSearch, setDraftSearch] = useState('Nicolas Cage');\r\n  const [search, setSearch] = useState('Nicolas Cage');\r\n  const [ezMode, setEzMode] = useState(true);\r\n\r\n  const handleFormSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setCardCount(draftCardCount);\r\n    setSearch(draftSearch);\r\n    setEzMode(ezMode);\r\n  };\r\n\r\n  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setDraftSearch(e.currentTarget.value);\r\n  };\r\n\r\n  const handleCardCountChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n    const next = parseInt(e.currentTarget.value, 10);\r\n    setDraftCardCount(next);\r\n  };\r\n\r\n  const handleEzModeChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setEzMode(e.currentTarget.checked);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleFormSubmit}>\r\n        <label>\r\n          Search:\r\n          <input\r\n            type=\"text\"\r\n            value={draftSearch}\r\n            onChange={handleSearchChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Card count:\r\n          <select value={draftCardCount} onChange={handleCardCountChange}>\r\n            {GAME_SIZES.map(s => (\r\n              <option value={s} key={s}>\r\n                {s}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label>\r\n          EZ Mode:\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={ezMode}\r\n            onChange={handleEzModeChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" disabled={!draftSearch}>\r\n          Start\r\n        </button>\r\n      </form>\r\n\r\n      <Game search={search} cardCount={cardCount} ezMode={ezMode} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}